// ** Обработка загрузки комплекта отчетности из repx (тестировалось на БГУ 2.0.37.10) **

#use "updater1c"

// ****************************************************************************
// Переменные модуля
// ****************************************************************************

Перем errors;		// Признак того, что при выполнении скрипта были ошибки.
Перем updater;		// Обновлятор, через который мы получаем информацию о базе,
					// а также вызываем различные функции обновлятора.
Перем connector;	// Коннектор для подключения к базе.
Перем v8;			// Само подключение к базе через коннектор.

// ****************************************************************************
// Ваш код для выполнения обновлятором
// ****************************************************************************

Процедура Главная()
	
	// ************************************************************************
	// Почему всё написано так сложно?
	//
	// Потому, что здесь мы работает с кучей COM-объектов и для безошибочной
	// работы нам требуется задать явный порядок их уничтожения - обратный
	// их созданию, иначе сборщик мусора на стороне OneScript уничтожает
	// их в конце работы скрипта в своём порядке и, как показывает
	// практика, это приводит к проблемам (скрипт отработав верно не может
	// корректно уничтожить все COM-объекты и завершается с кодом ошибки).
	//
	// При этом COM-объекты создаются порою в неочевидных местах и требуется
	// соблюдение ряда правил, чтобы не упустить из нашего внимания ни один
	// из созданных объектов.
	// а) В частности, нельзя использовать обход COM-коллекций циклом Для Каждого,
	// потому что это приводит к неявному созданию COM-объекта, который мы
	// сами освободить не сможем и он зависнет до момента, когда будет
	// освобождён сборщиком мусора и это приведёт к ошибке, так как все
	// остальные объекты уже будут к этому моменту уничтожены.
	// б) По этой же причине нельзя обращаться к COM-объектам больше чем через
	// одну точку, так как это тоже приводит к неявному созданию COM-объектов.
	// Постараюсь написать статью на эту тему.
	// ************************************************************************
	
	ПакетныеФайлыOPC = Неопределено;
	Пакет = Неопределено;
	СвязиПакета = Неопределено;
	Relationship = Неопределено;
	ЧтениеМанифеста = Неопределено;
	ФабрикаXDTO = Неопределено;
	МанифестXDTO = Неопределено;
	ПереченьКомплектов = Неопределено;
	ОписаниеКомплекта = Неопределено;
	Обработки = Неопределено;
	ИмпортКейса = Неопределено;
	МодульЗагрузки = Неопределено;
	БылиОшибки = Ложь;
	
	Попытка	
		ИмяФайла = "x:/data.repx";

		Сообщить("Импорт комплекта отчетности из файла: <b>" + ИмяФайла + "</b>.");
		
		ПакетныеФайлыOPC = v8.ПакетныеФайлыOPC;

		// ** Чтение пакета **
		Пакет = ПакетныеФайлыOPC.ЧтениеОткрыть(ИмяФайла);

		// ** Чтение связей пакета **
		СвязиПакета = ПакетныеФайлыOPC.ЧтениеПолучитьСвязиЧастиXDTO(Пакет, "");

		// ** Находим имя манифеста внутри пакета **
		ИмяЧастиМанифеста = Неопределено;
		Relationship = СвязиПакета.Relationship;
		
		Для Индекс = 0 По Relationship.Количество() - 1 Цикл
			СвязьПакета = Relationship.Получить(Индекс);
		
			Если СвязьПакета.Получить("TargetMode") = "External" Тогда
				ОсвободитьОбъект(СвязьПакета);
				Продолжить;
			КонецЕсли;
				
			Если СвязьПакета.Получить("Type") = "urn:rels-1c-ru:reports/meta/package-properties" Тогда
				ИмяЧастиМанифеста = СвязьПакета.Получить("Target"); 
				ОсвободитьОбъект(СвязьПакета);
				Прервать;
			КонецЕсли;
			
			ОсвободитьОбъект(СвязьПакета);
		КонецЦикла;

		Если ИмяЧастиМанифеста = Неопределено Тогда
			ПакетныеФайлыOPC.ЧтениеЗакрыть(Пакет);
			Сообщить("Не найдено оглавление в файле комплекта - некорректная структура файла.");
		Иначе
			Сообщить("Имя манифеста внутри пакета: " + ИмяЧастиМанифеста + ".");
			
			// ** Читаем манифест **
			ЧтениеМанифеста = ПакетныеФайлыOPC.ЧтениеПолучитьXMLЧасть(Пакет, ИмяЧастиМанифеста);
			
			Попытка
				ФабрикаXDTO = v8.ФабрикаXDTO;
				МанифестXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеМанифеста);
				ПереченьКомплектов = МанифестXDTO.ПолучитьXDTO("CaseDefinition");
				
				// ** Получаем описание комплекта **
				
				Попытка		
					ОписаниеКомплекта = ПереченьКомплектов.ПолучитьXDTO(0);
				Исключение
					ОписаниеКомплекта = ПереченьКомплектов;
				КонецПопытки;
				
				// ** Читаем содержимое комплекта **
				Сообщить("Содержимое комплекта находится в пакете по адресу: " + ОписаниеКомплекта.content + ".");
				
				Результат = ПакетныеФайлыOPC.ЧтениеПолучитьЧасть(Пакет, ОписаниеКомплекта.content);
				
				Попытка
					ФайлНаДиске = Результат.Файл.ПолноеИмя; // для совместимости со старыми версиями конфигураций
					ОсвободитьОбъект(Результат);
				Исключение
					ФайлНаДиске = Результат;
				КонецПопытки;
				
				Сообщить("Вытащили содержимое комплекта во внешний файл: " + ФайлНаДиске + ".");
				
				// ** Вызываем экспортную процедуру загрузки комплекта из менеджера обработки ИмпортКейса **
				Сообщить("Запустили загрузку комплекта отчетности в базу.");

				Обработки = v8.Обработки;
				ИмпортКейса = Обработки.ИмпортКейса;
				МодульЗагрузки = ИмпортКейса.Создать();
				
				Попытка
					МодульЗагрузки.АдресКомплекта = ФайлНаДиске;
					РезультатЗагрузки = МодульЗагрузки.Загрузить();
					
					Если РезультатЗагрузки Тогда
						Сообщить("<b>Успешная загрузка!</b>");
					Иначе
						Сообщить("<b><font color='red'>Произошла ошибка во время загрузки. Скорее всего комплект не подходит для данной версии конфигурации. В журнале регистрации указана точная причина ошибки.</font></b>");
						БылиОшибки = Истина;
					КонецЕсли;
				Исключение
					ВызватьИсключение;
				КонецПопытки;
			Исключение
				ЧтениеМанифеста.Закрыть();
				ПакетныеФайлыOPC.ЧтениеЗакрыть(Пакет);
				ВызватьИсключение;
			КонецПопытки;
			
			ЧтениеМанифеста.Закрыть();
			ПакетныеФайлыOPC.ЧтениеЗакрыть(Пакет);
		КонецЕсли;
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	// Освобождаем в порядке обратном созданию.
	Освободить(МодульЗагрузки);
	Освободить(ИмпортКейса);
	Освободить(Обработки);
	Освободить(ОписаниеКомплекта);
	Освободить(ПереченьКомплектов);
	Освободить(МанифестXDTO);
	Освободить(ФабрикаXDTO);
	Освободить(ЧтениеМанифеста);
	Освободить(Relationship);
	Освободить(СвязиПакета);
	Освободить(Пакет);
	Освободить(ПакетныеФайлыOPC);	

	Если БылиОшибки Тогда
		ВызватьИсключение "Возникла ошибка при загрузке.";
	КонецЕсли;
	
КонецПроцедуры

Процедура Освободить(Объект)

	Если Объект <> Неопределено Тогда
		ОсвободитьОбъект(Объект);
	КонецЕсли;

КонецПроцедуры

// ****************************************************************************
// Служебные процедуры
// ****************************************************************************

Процедура ПриНачалеРаботы()

	errors = Ложь;

	updater = Новый Updater1C;

	// Если в скрипте не планируется использовать
	// подключение к базе - просто закомментируйте
	// две нижние строки.
	connector = Новый COMОбъект("V" + updater.PlatformRelease + ".COMConnector");
	v8 = updater.BaseConnect(connector);
	
КонецПроцедуры

Процедура ПриОкончанииРаботы()

	Если v8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(v8);
			v8 = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если connector <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(connector);
			connector = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если updater <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(updater);
			updater = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;	

	Если errors Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;

КонецПроцедуры

// ****************************************************************************
// Инициализация и запуск скрипта
// ****************************************************************************

ПриНачалеРаботы();

Попытка	
	Главная();	
Исключение
	errors = Истина;
	Сообщить("<span class='red'><b>" + ОписаниеОшибки() + "</b></span>");
КонецПопытки;

ПриОкончанииРаботы();