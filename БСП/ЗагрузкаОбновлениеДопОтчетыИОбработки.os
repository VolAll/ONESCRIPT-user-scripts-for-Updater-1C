#use "updater1c"

// Благодарности за первичный код:
// Author: Plague Fox
// Site: PlugFox.ru  
// Infostart: https://infostart.ru/profile/PlugFox/
// Telegram: @PlugFox
// Email: PlugFox@gmail.com
// Github: http://github.com/PlugFox

 
// ****************************************************************************
// Переменные модуля
// ****************************************************************************
 
Перем errors;		// Признак того, что при выполнении скрипта были ошибки.
Перем updater;		// Обновлятор, через который мы получаем информацию о базе,
					// а также вызываем различные функции обновлятора.
Перем connector;	// Коннектор для подключения к базе.
Перем v8;			// Само подключение к базе через коннектор.

Перем ПутьПоиска;
Перем ПутьПеремещения;
Перем Перемещать;
Перем УчитыватьВерсионность;

// ****************************************************************************
// Ваш код для выполнения обновлятором
// ****************************************************************************
 
Процедура Главная()
 	Если Не v8.ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
        РегистрацияОшибки("Подсистема дополнительных отчетов и обработок - не используется в данной конфигурации", Истина);
    КонецЕсли;
        
    МассивОбработок = ПолучитьМассивПодключаемыхОбработок();
    
    Если Не МассивОбработок.Количество() Тогда Возврат КонецЕсли;
    
    Для Каждого Файл Из МассивОбработок Цикл
        Попытка
            Если НЕ Файл.Существует() Или Не Файл.ЭтоФайл() Тогда Продолжить КонецЕсли;
            ПодключитьОбработку(Файл);
            ПереместитьОбработку(Файл);
        Исключение
            РегистрацияОшибки(ОписаниеОшибки(), Ложь);    
        КонецПопытки;
    КонецЦикла;	 
КонецПроцедуры
 
// ****************************************************************************
// Служебные процедуры
// ****************************************************************************
 
 Процедура РегистрацияОшибки(ОписаниеОшибки, Пробрасывать = Истина, ИмяСобытия)    
    
    ОписаниеОшибки  = СтрШаблон("Ошибка обработки ""%1"".
    							|Описание ошибки: %2", ИмяСобытия, ОписаниеОшибки);
    							
	v8.ЗаписьЖурналаРегистрации(ИмяСобытия 
    						, v8.УровеньЖурналаРегистрации.Ошибка
    						, Неопределено
							, Неопределено
							, ОписаниеОшибки);
						        
    Сообщение       = Новый СообщениеПользователю;
    Сообщение.Текст = ОписаниеОшибки;
    Сообщение.Сообщить();
    
    Если Не Пробрасывать Тогда Возврат КонецЕсли;
    
    ВызватьИсключение ОписаниеОшибки;
    
КонецПроцедуры // РегистрацияОшибки()

Функция ПолучитьМассивПодключаемыхОбработок()
    Возврат НайтиФайлы(ПутьПоиска, "*.epf", Ложь);
КонецФункции // ПолучитьМассивПодключаемыхОбработок()

Процедура ПереместитьОбработку(Файл)
    Если Не Перемещать Тогда Возврат КонецЕсли;
    ПереместитьФайл(Файл.ПолноеИмя, СтрШаблон("%1/%2", ПутьПеремещения, Файл.Имя));   
КонецПроцедуры // ПереместитьОбработку()

Процедура ПодключитьОбработку(Файл)
    Перем ПараметрыРегистрации;
    
    _обработка   = v8.ВнешниеОбработки.Создать(Файл.ПолноеИмя);
    
    // Получим параметры регистрации
    Попытка
        ПараметрыРегистрации    = _обработка.СведенияОВнешнейОбработке();
    Исключение
        ВызватьИсключение СтрШаблон("Обработка ""%1"" не является подключаемой.", _обработка.ИспользуемоеИмяФайла);    
    КонецПопытки;
    
    // Найдем в базе существующую версию этой обработки
    _ссылка  = v8.Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ПараметрыРегистрации.Наименование);
    //_ссылка = v8.Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", _обработка.Метаданные().Имя);
    Если _ссылка = Неопределено Или _ссылка.Пустая() Тогда
        _объект = v8.Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();        
    Иначе
        // Сравним версии обработок
        Если УчитыватьВерсионность Тогда
            ВерсияПодключаемойОбработки = v8.СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРегистрации.Версия);
            ВерсияТекущейОбработки      = v8.СтроковыеФункцииКлиентСервер.СтрокаВЧисло(_ссылка.Версия);
            
            Если ТипЗнч(ВерсияПодключаемойОбработки) = Тип("Число") 
            И ТипЗнч(ВерсияТекущейОбработки) = Тип("Число") 
            И ВерсияПодключаемойОбработки <= ВерсияТекущейОбработки Тогда 
                Возврат; // Если версия обработки не является более свежей
            КонецЕсли;
        КонецЕсли;
        _объект = _ссылка.ПолучитьОбъект();    
    КонецЕсли;
    
    // Добавим в базу подключаемую обработку
    v8.ЗаполнитьЗначенияСвойств(_объект, ПараметрыРегистрации);
    _объект.ХранилищеОбработки  = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файл.ПолноеИмя));
    _объект.Вид                 = v8.ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок." + ПараметрыРегистрации.Вид);
    _объект.Публикация          = v8.ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется");
    _объект.ИмяОбъекта          = _обработка.Метаданные().Имя;
    _объект.ИмяФайла            = Файл.Имя;
    Попытка
        _объект.Ответственный   = ПараметрыСеанса.ТекущийПользователь;
    Исключение
    КонецПопытки;
    _объект.ИспользоватьДляФормыОбъекта     = Истина;
    _объект.ИспользоватьДляФормыСписка      = Истина;
    _объект.РежимСовместимостиРазрешений    = v8.ПредопределенноеЗначение("Перечисление.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3");
    
    // Заполним ТЧ
    _объект.Команды.Очистить();
    Для Каждого Команда Из ПараметрыРегистрации.Команды Цикл
        нКоманда = _объект.Команды.Добавить();
        ЗаполнитьЗначенияСвойств(нКоманда, Команда);
        нКоманда.ВариантЗапуска = v8.ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок." + Команда.Использование);
    КонецЦикла;
    _объект.Назначение.Очистить();
    Для Каждого Назначение Из ПараметрыРегистрации.Назначение Цикл
        нНазначение = _объект.Назначение.Добавить();
        нНазначение.ОбъектНазначения    = v8.Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", Назначение);        
    КонецЦикла;
    
    // Запишем и подключим
    _объект.Записать();
    Имя = v8.ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(_объект.Ссылка);
    Если Имя = Неопределено Тогда
        ВызватьИсключение СтрШаблон("Обработка ""%1"" не подключена.", _обработка.ИспользуемоеИмяФайла);
    КонецЕсли;
КонецПроцедуры // ПодключитьОбработку()
 
Процедура ПриНачалеРаботы()

	errors = Ложь;
 
	updater = Новый Updater1C;
 
	// Если в скрипте не планируется использовать
	// подключение к базе - просто закомментируйте
	// две нижние строки.
	connector = Новый COMОбъект("V" + updater.PlatformRelease + ".COMConnector");
	v8 = updater.BaseConnect(connector);
 
КонецПроцедуры
 
Процедура ПриОкончанииРаботы()
 
	Если v8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(v8);
			v8 = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
 
	Если connector <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(connector);
			connector = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
 
	Если updater <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(updater);
			updater = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
 
	ВыполнитьСборкуМусора();
 
	Если errors Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
 
КонецПроцедуры
 
// ****************************************************************************
// Инициализация и запуск скрипта
// ****************************************************************************

////////////////////////////////////////////////////////////////////////////////
ПутьПоиска              = "C:\external-data-processors\";
ПутьПеремещения         = "C:\external-data-processors\.tmp";
Перемещать              = Ложь;
УчитыватьВерсионность   = Истина;
//////////////////////////////////////////////////////////////////////////////// 
 
 
ПриНачалеРаботы();
 
Попытка	
	Главная();	
Исключение
	errors = Истина;
	Сообщить(ОписаниеОшибки());
КонецПопытки;
 
ПриОкончанииРаботы();