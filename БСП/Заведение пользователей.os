#use "updater1c"

Перем errors;				// Признак того, что при выполнении скрипта были ошибки.
Перем updater;				// Обновлятор, через который мы получаем информацию о базе а также вызываем различные функции обновлятора.
Перем connector;			// Коннектор для подключения к базе.
Перем v8;					// Само подключение к базе через коннектор.
Перем ADODB;				// Подключение ADODB
Перем Access;				// ADODB коннектор (для Access)
Перем ПереопределятьПрава;	// Флаг переопределения прав пользователю, если таковой уже есть в целевой базе

Процедура Главная()
// В скрипте заменяем значения
// *ИмяДомена*
// *Адрес почты*
// на нужные
	
///////////////////////////	ЗАПОЛНЯЕМ ЗНАЧЕНИЯ ТУТ	//////////////////////////
 	ИмяПользователя 	= "";												//Имя вновь создаваемого пользователя
 	КакУКого 			= "";												//Скопируем права у существующего пользователя
 	ПереопределятьПрава	= Истина;											//Переписывать права пользователю на указанные, если он уже есть в базе(Процедура запустится только если значение - Истина)
 	АдресДляКопии		= "";												//Адрес для скрытой копии письма с учётными данными пользователя
//////////////////////////////////////////////////////////////////////////////
 		
 	ДанныеДомена 		= ПолучитьДанныеДомена(ИмяПользователя);
 	СтрокаСоединения 	= v8.СтрокаСоединенияИнформационнойБазы();
 	Конфигурация 		= v8.Метаданные.Представление();
 	СоздатьПользователя(ИмяПользователя, ДанныеДомена, КакУКого, Конфигурация, СБЕ, АдресДляКопии); 
КонецПроцедуры

Процедура СоздатьПользователя(ИмяПользователя, ДанныеДомена, КакУКого, Конфигурация, СБЕ, АдресДляКопии)	
	СтрокаСоединения 	= v8.СтрокаСоединенияИнформационнойБазы();
	ЭтоЕРП 				= ЭтоЕРП(СтрокаСоединения);
	ЭтоСЭД 				= ЭтоСЭД(СтрокаСоединения);
		
	ПользовательИБ 				= v8.ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.Имя 			= ИмяПользователя; 
	ПользовательИБ.ПолноеИмя 	= ИмяПользователя;
	Если ЭтоСЭД Тогда
		Пароль = СгенерироватьПароль();
		ПользовательИБ.Пароль = Пароль;		
	Иначе
		ПользовательИБ.Пароль = "";
	КонецЕсли;
	
	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	Если ДанныеДомена <> Неопределено Тогда
		ПользовательИБ.АутентификацияОС = Истина;
		ПользовательИБ.ПользовательОС = ДанныеДомена.ПользовательОС;
		ПользовательИБ.АутентификацияСтандартная = Ложь;
	Иначе
		ПользовательИБ.АутентификацияСтандартная = Истина;
		Сообщить("Не получены данные из AD. Данные аутентификации и адреса почты не заполнены");
		errors = Истина;
	КонецЕсли;
	 
	Если v8.ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБ.Имя) = Неопределено Тогда
	    ПользовательИБ.Записать();	
	    Сообщить("Новый пользователь "+ИмяПользователя+" создан.");
	Иначе
	    Если ПереопределятьПрава <> Истина Тогда
	    	Сообщить("!!!");
	    	Сообщить("Пользователь с таким именем уже есть в базе!");
	    	Сообщить("!!!");
	    	errors = Истина;
	    	Возврат;
	    Иначе
	    	ПользовательИБ = v8.ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	    КонецЕсли;
	КонецЕсли;
	
	// создаём пользователя справочника или пытаемся переопределить его права, если такой уже есть в базе
	Если ПереопределятьПрава = Истина Тогда
		Если ПереопределитьПрава(v8.Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя).Ссылка, КакУКого, Конфигурация) Тогда
			Сообщить("Права пользователя "+ИмяПользователя+" переопределены. Назначены права как у "+КакУКого);
			Возврат;
		Иначе
			ФамилияИнициалы = v8.ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ИмяПользователя);
			НовоеИмя = СтрЗаменить(ФамилияИнициалы, ".", "");
			НовоеИмя = СтрЗаменить(НовоеИмя, " ", "");
			Если ПереопределитьПрава(v8.Справочники.Пользователи.НайтиПоНаименованию(НовоеИмя).Ссылка, КакУКого, Конфигурация) Тогда
				Сообщить("Права пользователя "+НовоеИмя+" переопределены. Назначены права как у "+КакУКого);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Пользователь 					= v8.Справочники.Пользователи.СоздатьЭлемент();
	Пользователь.Наименование 		= ПользовательИБ.ПолноеИмя;
	Если ЭтоСЭД Тогда
		Пользователь.ФизЛицо 		= ПолучитьФизЛицо(ИмяПользователя, ЭтоСЭД);
	Иначе
		Пользователь.ФизическоеЛицо = ПолучитьФизЛицо(ИмяПользователя, ЭтоСЭД);
	КонецЕсли;
		
	ОписаниеПользователяИБ = v8.NewObject("Структура");
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);	
	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	Попытка
		Пользователь.Записать();
	Исключение
		Сообщить("!!!");
		Сообщить("Попытка записи элемента справочника ""Пользователи"" была безуспешной. Процедура записи пользователя прямо или косвенно вызывает не заимствованую процедуру или функцию из расширения, которую невозможно инициализировать из внешнего соединения.");
		Сообщить(ОписаниеОшибки());
		Сообщить("Варианты исправления:"+Символы.ПС+" - Инструкция препроцессора ""#Если Не ВнешнееСоединение"" перед вызовом этой процедуры/функции."+Символы.ПС+" - Флаг ""Внешнее соединение"" в свойствах модуля.");
		ПользовательИБ.Удалить();
		Сообщить("Пользователь ИБ удалён. Процедура создания пользователя прервана.");
		Сообщить("!!!");
		errors = Истина;
		Возврат;
	КонецПопытки;
	
	//Запишем e-mail
	Если ДанныеДомена <> Неопределено Тогда
		Если ЭтоЕРП или ЭтоСЭД Тогда
			Попытка
				ВидКонтактнойИнформации 		= v8.Справочники.ВидыКонтактнойИнформации.EmailПользователя;
				ТипКонтактнойИнформации 		= ВидКонтактнойИнформации.Тип;
				ОбъектXDTOКонтактнаяИнформация 	= v8.УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(ДанныеДомена.АдресПочты, ТипКонтактнойИнформации);	
				ЗначенияПолей = v8.УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКонтактнаяИнформация);
				v8.УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Пользователь, ЗначенияПолей, ВидКонтактнойИнформации, ТипКонтактнойИнформации);
				Пользователь.Записать();
				Сообщить("Записан e-mail пользователя");
			Исключение
				Сообщить("!!!");
				Сообщить("Запись e-mail пользователя была неудачной. Заполните поле вручную ("+ДанныеДомена.АдресПочты+").");
				Сообщить("!!!");
				errors = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//Назначаем права пользователю
	ПользовательИБ 	= v8.ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Наименование);
	СпрПользователь = Пользователь.Ссылка;
	МассивПрав 		= Неопределено;
	Если КакУКого <> "" Тогда
		МассивПрав 	= ПолучитьПраваПользователя(КакУКого, Конфигурация);
	КонецЕсли;
	Если МассивПрав <> Неопределено Тогда
		НазначитьПраваПользователю(ПользовательИБ, СпрПользователь, МассивПрав, Конфигурация);	
	КонецЕсли;
	ПользовательИБ.Записать();	
	
КонецПроцедуры

Функция ПереопределитьПрава(Пользователь, КакУКого, Конфигурация)
	Попытка
		ПользовательИБ 	= v8.ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		НовыеПрава 		= ПолучитьПраваПользователя(КакУКого, Конфигурация);
		Если НовыеПрава <> Неопределено Тогда
			ПользовательИБ.Роли.Очистить();
			НазначитьПраваПользователю(ПользовательИБ, Пользователь, НовыеПрава, Конфигурация);
			Возврат Истина
		Иначе
			Возврат Ложь
		КонецЕсли;
	Исключение
		Возврат Ложь
	КонецПопытки;
КонецФункции

Процедура НазначитьПраваПользователю(ПользовательИБ, СпрПользователь, МассивПрав, Конфигурация)
	Если СтрНайти(Конфигурация, "Документооборот") <> 0 Тогда
		Для Индекс = 0 По МассивПрав.МассивПрав.Количество() - 1 Цикл
			РабочаяГруппа 						= МассивПрав.МассивПрав[Индекс].ПолучитьОбъект();
			НовыйПользователь 					= РабочаяГруппа.Состав.Добавить();
			НовыйПользователь.Пользователь 		= СпрПользователь;
			РабочаяГруппа.Записать();
			Сообщить("Пользователь включен в рабочую группу ("+РабочаяГруппа.Наименование+")");
			ЗаполнитьСведения(СпрПользователь, МассивПрав.Сведения);
		КонецЦикла;
	ИначеЕсли СтрНайти(Конфигурация, "Управление предприятием") <> 0 Тогда
		Для Индекс = 0 По МассивПрав.МассивПрав.Количество() - 1 Цикл
			ГруппаДоступа 						= МассивПрав.МассивПрав[Индекс].ПолучитьОбъект();
			НовыйПользователь 					= ГруппаДоступа.Пользователи.Добавить();
			НовыйПользователь.Пользователь 		= СпрПользователь;
			ГруппаДоступа.Записать();
			Сообщить("Пользователь включен в группу доступа ("+ГруппаДоступа.Наименование+")");
			ПользовательОбъект 					= СпрПользователь.ПолучитьОбъект();
			ПользовательОбъект.Подразделение 	= МассивПрав.Сведения.Подразделение;
			ПользовательОбъект.Записать();
		КонецЦикла;
	ИначеЕсли СтрНайти(Конфигурация, "Зарплата и управление персоналом") <> 0 или СтрНайти(Конфигурация, "Бухгалтерия предприятия") <> 0 или СтрНайти(Конфигурация, "Бухгалтерия сельскохозяйственного предприятия") <> 0 или СтрНайти(Конфигурация, "Учет застройщика") <> 0 Тогда
		Для Индекс = 0 По МассивПрав.Количество() - 1 Цикл
			ПользовательИБ.Роли.Добавить(v8.Метаданные.НайтиПоПолномуИмени(МассивПрав[Индекс]));
			ПользовательИБ.Записать();
			Сообщить("Пользователю добавлена роль ("+МассивПрав[Индекс]+")");
		КонецЦикла;
	КонецЕсли;
	//Для ЕРП и СЭД всё равно нужно добавлять пользователю роли
	Если СтрНайти(Конфигурация, "Управление предприятием") <> 0 или СтрНайти(Конфигурация, "Документооборот") <> 0 Тогда
		Для Индекс = 0 По МассивПрав.Роли.Количество() - 1 Цикл
			ПользовательИБ.Роли.Добавить(v8.Метаданные.НайтиПоПолномуИмени(МассивПрав.Роли[Индекс]));
			ПользовательИБ.Записать();
		КонецЦикла;
		Сообщить("Скопированы необходимые роли.");
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПраваПользователя(ИмяПользователя, Конфигурация)
	ПользовательИБ 	= v8.ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	СпрПользователь = v8.Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		ФамилияИнициалы = v8.ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ИмяПользователя);
		НовоеИмя 		= СтрЗаменить(ФамилияИнициалы, ".", "");
		НовоеИмя 		= СтрЗаменить(НовоеИмя, " ", "");
		ПользовательИБ 	= v8.ПользователиИнформационнойБазы.НайтиПоИмени(НовоеИмя);
	КонецЕсли;
	
	Если СпрПользователь = v8.Справочники.Пользователи.ПустаяСсылка() Тогда
		ФамилияИнициалы = v8.ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ИмяПользователя);
		НовоеИмя 		= СтрЗаменить(ФамилияИнициалы, ".", "");
		НовоеИмя 		= СтрЗаменить(НовоеИмя, " ", "");
		СпрПользователь = v8.Справочники.Пользователи.НайтиПоНаименованию(НовоеИмя);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Сообщить("Пользователь "+ИмяПользователя+" не зарегистрирован в базе.");
		Возврат Неопределено
	КонецЕсли;
	Запрос = v8.NewObject("Запрос");
	МассивПрав = Новый Массив;
	Если СтрНайти(Конфигурация, "Документооборот") <> 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|РабочиеГруппыСостав.Ссылка КАК Элемент
		|ИЗ
		|Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|ГДЕ
		|РабочиеГруппыСостав.Пользователь = &Пользователь";	
		Запрос.УстановитьПараметр("Пользователь", СпрПользователь);
	ИначеЕсли СтрНайти(Конфигурация, "Управление предприятием") <> 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|ГруппыДоступаПользователи.Ссылка КАК Элемент
		|ИЗ
		|Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|ГруппыДоступаПользователи.Пользователь = &Пользователь";	
		Запрос.УстановитьПараметр("Пользователь", СпрПользователь);
	ИначеЕсли СтрНайти(Конфигурация, "Зарплата и управление персоналом") <> 0  или СтрНайти(Конфигурация, "Бухгалтерия предприятия") <> 0 Или СтрНайти(Конфигурация, "Бухгалтерия сельскохозяйственного предприятия") <> 0 или СтрНайти(Конфигурация, "Учет застройщика") <> 0 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|ПрофилиГруппДоступаРоли.Роль.ПолноеИмя КАК Элемент
		|ИЗ
		|Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ПО (ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка)
		|ГДЕ
		|ГруппыДоступаПользователи.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", СпрПользователь);
	Иначе
		Сообщить("Не удалось получить набор прав у "+ИмяПользователя+" в конфигурации "+Конфигурация+", Обратитесь к разработчику.");
	КонецЕсли;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПрав.Добавить(Выборка.Элемент);
	КонецЦикла;
	
	Если СтрНайти(Конфигурация, "Документооборот") <> 0 или СтрНайти(Конфигурация, "Управление предприятием") <> 0 Тогда	
		Роли = Новый Массив;
		Для каждого Роль из ПользовательИБ.Роли Цикл
			Роли.Добавить(Роль.ПолноеИмя);
		КонецЦикла;
		СтруктураПользователю = Новый Структура;
		СтруктураПользователю.Вставить("МассивПрав", МассивПрав);
		СтруктураПользователю.Вставить("Роли", Роли);
		//Для СЭДа заполним имя в переписке, должность, руководителя и т.д.
		Если СтрНайти(Конфигурация, "Документооборот") <> 0 Тогда
			Сведения = ПолучитьСведенияПользователя(СпрПользователь);
			СтруктураПользователю.Вставить("Сведения", Сведения);
		//ЕРП - Добавим подразделение.
		ИначеЕсли СтрНайти(Конфигурация, "Управление предприятием") <> 0 Тогда
			Сведения = Новый Структура;
			Сведения.Вставить("Подразделение", СпрПользователь.Подразделение);
			СтруктураПользователю.Вставить("Сведения", Сведения);		
		КонецЕсли;
		Возврат СтруктураПользователю
	Иначе
		Возврат МассивПрав
	КонецЕсли;
КонецФункции

Функция ПолучитьСведенияПользователя(СпрПользователь)	
	Сведения = Новый Структура;
	Сведения.Вставить("Подразделение", 	v8.Справочники.СтруктураПредприятия.ПустаяСсылка());
	Сведения.Вставить("Должность", 		v8.Справочники.Должности.ПустаяСсылка());
	Сведения.Вставить("ГрафикРаботы", 	v8.Справочники.ГрафикиРаботы.ПустаяСсылка());
	Сведения.Вставить("Ранг", 0);
		
	Запрос = v8.NewObject("Запрос");
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СведенияОПользователяхДокументооборот.Подразделение,
	|	СведенияОПользователяхДокументооборот.Должность,
	|	СведенияОПользователяхДокументооборот.ГрафикРаботы,
	|	СведенияОПользователяхДокументооборот.Ранг
	|ИЗ
	|	РегистрСведений.СведенияОПользователяхДокументооборот КАК СведенияОПользователяхДокументооборот
	|ГДЕ
	|	СведенияОПользователяхДокументооборот.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", СпрПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Попытка
		Пока Выборка.Следующий() Цикл
			Сведения.Подразделение 	= Выборка.Подразделение;
			Сведения.Должность 		= Выборка.Должность;
			Сведения.ГрафикРаботы 	= Выборка.ГрафикРаботы;
			Сведения.Ранг 			= Выборка.Ранг;
		КонецЦикла;
	Исключение
		Сообщить("!!!");
		Сообщить("Не удалось получить сведения пользователя");
		Сообщить("!!!");
		errors = Истина;
	КонецПопытки;
	Возврат Сведения
КонецФункции

Функция ЗаполнитьСведения(СпрПользователь, Сведения)
	Набор = v8.РегистрыСведений.СведенияОПользователяхДокументооборот.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(СпрПользователь.Ссылка);
	
	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Пользователь 	= СпрПользователь.Ссылка;
	НоваяЗапись.Подразделение 	= Сведения.Подразделение;
	НоваяЗапись.Должность 		= Сведения.Должность;
	НоваяЗапись.ГрафикРаботы 	= Сведения.ГрафикРаботы;
	НоваяЗапись.Ранг 			= Сведения.Ранг;
	Набор.Записать();
	
	ФамилияИнициалы = v8.ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СпрПользователь.Наименование);
	ПользовательОбъект = СпрПользователь.ПолучитьОбъект();
	ПользовательОбъект.ПредставлениеВДокументах 		= ФамилияИнициалы;
	ПользовательОбъект.ПредставлениеВПереписке 			= ФамилияИнициалы;
	ПользовательОбъект.ПредставлениеВПерепискеСРангом	= ФамилияИнициалы;
	ПользовательОбъект.Записать();
КонецФункции

Функция ПолучитьДанныеДомена(ИмяПользователя)	
	ADODB.ConnectionString = "Provider=""ADsDSOObject""";
	ADODB.Open();
	Сообщить("Соединение открыто");
	Querry = "
	|SELECT AdsPath
	|FROM 'LDAP://OU=*ИмяДомена*, DC=*ИмяДомена*, DC=local'
	|WHERE 
	|    objectCategory = 'user'
	|    and objectClass = 'person' 
	|    and DisplayName = '" + СокрЛП(ИмяПользователя) + "' 
	|ORDER BY sn
	|";
	Result = ADODB.Execute(Querry);
	Сообщить("Запрос выполнен");
	Если НЕ Result.EOF Тогда
		ДанныеДомена = Новый Структура;
		Path = Result.Fields("AdsPath").Value;
		Object = GetCOMObject(Path);
		ДанныеДомена.Вставить("АдресПочты", Object.Mail);
		Сообщить(Object.Mail);
		ДанныеДомена.Вставить("ПользовательОС", "\\*ИмяДомена*\"+Object.sAMAccountName);
		Сообщить(Object.sAMAccountName);
		
		Возврат ДанныеДомена
	Иначе
		ADODB.Close();
		errors = Истина;		
		Сообщить("Ошибка выполнения запроса к AD");
		Возврат "Ошибка выполнения запроса к AD"
	КонецЕсли;
КонецФункции

Функция ЭтоЕРП(СтрокаСоединения)	
 	ИмяБазы = НСтр(СтрокаСоединения, "Ref");
 	Сервер = НСтр(СтрокаСоединения, "Srvr");
 	Если ВРег(ИмяБазы) = "GKERP" И Сервер = "e1c5" Тогда
 		Возврат Истина
 	Иначе
 		Возврат Ложь
 	КонецЕсли; 	
КонецФункции

Функция ЭтоСЭД(СтрокаСоединения)
 	ИмяБазы = НСтр(СтрокаСоединения, "Ref");
 	Сервер = НСтр(СтрокаСоединения, "Srvr");
 	Если ВРег(ИмяБазы) = "GKSED" И Сервер = "e1c5" Тогда
 		Возврат Истина
 	Иначе
 		Возврат Ложь
 	КонецЕсли;
КонецФункции

Функция СгенерироватьПароль()
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ИспользуемыеСимволы = "243456789AQWERTYUPASDFGHJKLZXCVBNMqwertyupasdfghjklzxcvbnm";
	КоличествоСимволов = СтрДлина(ИспользуемыеСимволы);
	Пароль = "";
	Пока СтрДлина(Пароль) < 8 Цикл
    	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, КоличествоСимволов);
		НекийСимвол = Сред(ИспользуемыеСимволы, СлучайноеЧисло, 1);
    	Пароль = Пароль + НекийСимвол;
	КонецЦикла;
	Возврат Пароль;
КонецФункции

Функция ПолучитьФизЛицо(ИмяПользователя, ЭтоСЭД)
	Запрос = v8.NewObject("Запрос");
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо	
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование ПОДОБНО &Наименование";	
	Запрос.УстановитьПараметр("Наименование", ВариацииЕЁ(ИмяПользователя));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ФизЛицо = v8.Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Наименование = ИмяПользователя;
		Если ЭтоСЭД = Ложь Тогда
			ФизЛицо.ФИО = ИмяПользователя;
		КонецЕсли;
		ФизЛицо.Записать();
		Сообщить("Создан новый элемент справочника Физические лица "+ИмяПользователя+".");
		Возврат ФизЛицо.Ссылка
	Иначе;
		Выборка = Результат.Выбрать();		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФизЛицо
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьПочтуСЭД()
	Запрос = v8.NewObject("Запрос");
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Наименование = &АдресПочты";	
	Запрос.УстановитьПараметр("АдресПочты", "*Адрес почты*");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено
	Иначе;
		Выборка = Результат.Выбрать();		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВариацииЕЁ(ИмяПользователя)
	Параметр = СтрЗаменить(ИмяПользователя, "е", "ё");
	Параметр = СтрЗаменить(Параметр, "ё", "[её]");
	Возврат Параметр;
КонецФункции


//Служебные процедуры 
Процедура ПриНачалеРаботы()
	errors 				= Ложь;
	updater 			= Новый Updater1C;
	connector 			= Новый COMОбъект("V" + updater.PlatformRelease + ".COMConnector");
	v8 					= updater.BaseConnect(connector);
	//ADODB
	ADODB 				= Новый COMОбъект("ADODB.Connection");	
    ПереопределятьПрава = Неопределено;
КонецПроцедуры

Процедура ПриОкончанииРаботы()
	Если v8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(v8);
			v8 = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если connector <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(connector);
			connector = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если updater <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(updater);
			updater = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ADODB <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(ADODB);
			ADODB = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Access <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Access);
			Access = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();
	
	Приостановить(1000);
	Если errors Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;

КонецПроцедуры

// ****************************************************************************
// Инициализация и запуск скрипта
// ****************************************************************************

ПриНачалеРаботы();

Попытка	
	Главная();	
Исключение
	errors = Истина;
	Сообщить("<span class='red'><b>" + ОписаниеОшибки() + "</b></span>");
КонецПопытки;

ПриОкончанииРаботы();